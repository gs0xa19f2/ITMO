print("start: s\naccept: ac\nreject: rj\nblank: _\ns 0 -> s X >\ns 1 -> s Y >\ns _ -> copy* * <\ncopy* Y -> copy* Y <\ncopy* X -> copy* X <\ncopy* 1 -> copy* 1 <\ncopy* 0 -> copy* 0 <\ncopy* * -> copy* * <\ncopy* _ -> copying* _ >\ncopying* X -> copyingX* 0 >\ncopying* Y -> copyingY* 1 >\ncopying* 0 -> copying* 0 >\ncopying* 1 -> copying* 1 >\ncopying* * -> sub* * >\ncopyingX* X -> copyingX* X >\ncopyingX* Y -> copyingX* Y >\ncopyingX* * -> copyingX* * >\ncopyingX* 1 -> copyingX* 1 >\ncopyingX* 0 -> copyingX* 0 >\ncopyingX* _ -> copy* 0 <\ncopyingY* X -> copyingY* X >\ncopyingY* Y -> copyingY* Y >\ncopyingY* * -> copyingY* * >\ncopyingY* 1 -> copyingY* 1 >\ncopyingY* 0 -> copyingY* 0 >\ncopyingY* _ -> copy* 1 <\nsub* 1 -> sub* 1 >\nsub* 0 -> sub* 0 >\nsub* _ -> subing* $ <\nsubing* 1 -> toLeft 0 <\nsubing* 0 -> subing* 1 <\nsubing* * -> zeroSpecial * >\nzeroSpecial 1 -> zeroSpecial * >\nzeroSpecial $ -> zeroSpecial * >\nzeroSpecial _ -> cleanZeroSpecial _ <\ncleanZeroSpecial * -> cleanZeroSpecial _ <\ncleanZeroSpecial 0 -> ac 1 ^\ntoLeft 0 -> toLeft 0 <\ntoLeft 1 -> toLeft 1 <\ntoLeft A -> toLeft 0 <\ntoLeft Z -> toLeft 1 <\ntoLeft * -> toLeft * <\ntoLeft $ -> toLeft $ <\ntoLeft X -> copy$ X >\ntoLeft Y -> copy$ Y >\ntoLeft _ -> copy$ _ >\ncopy$ 0 -> copyingX$ X >\ncopy$ 1 -> copyingY$ Y >\ncopy$ * -> clearLeft * <\ncopyingX$ 0 -> copyingX$ 0 >\ncopyingX$ 1 -> copyingX$ 1 >\ncopyingX$ * -> copyingX$ * >\ncopyingX$ $ -> copyingX$ $ >\ncopyingX$ _ -> toLeft 0 <\ncopyingY$ 0 -> copyingY$ 0 >\ncopyingY$ 1 -> copyingY$ 1 >\ncopyingY$ * -> copyingY$ * >\ncopyingY$ $ -> copyingY$ $ >\ncopyingY$ _ -> toLeft 1 <\nclearLeft X -> clearLeft Z <\nclearLeft Y -> clearLeft Z <\nclearLeft _ -> clearingLeft _ >\nclearingLeft Z -> clearingLeft _ >\nclearingLeft * -> placeZero * <\nplaceZero _ -> check$ 0 >\ncheck$ 0 -> check$ 0 >\ncheck$ 1 -> check$ 1 >\ncheck$ * -> check$ * >\ncheck$ # -> check$ # >\ncheck$ % -> check$ % >\ncheck$ A -> checkMultiplier A <\ncheck$ Z -> checkMultiplier Z <\ncheck$ $ -> checkMultiplier $ <\ncheckMultiplier A -> checkMultiplier A <\ncheckMultiplier Z -> checkMultiplier Z <\ncheckMultiplier * -> nextIt * <\ncheckMultiplier 0 -> addRank A <\ncheckMultiplier 1 -> sumRightLeft 1 >\nnextIt # -> nextIt 0 <\nnextIt % -> nextIt 1 <\nnextIt 1 -> prepareRight 1 >\nnextIt 0 -> prepareRight 0 >\nnextIt _ -> fin _ >\nfin 0 -> fin _ >\nfin 1 -> fin _ >\nfin * -> fin _ >\nfin A -> fin _ >\nfin Z -> fin _ >\nfin $ -> ac _ >\nprepareRight 0 -> prepareRight 0 >\nprepareRight 1 -> prepareRight 1 >\nprepareRight * -> prepareRight * >\nprepareRight Z -> prepareRight 1 >\nprepareRight A -> prepareRight 0 >\nprepareRight $ -> clearRight $ >\nclearRight 1 -> clearRight Z >\nclearRight 0 -> clearRight Z >\nclearRight _ -> clearingRight _ <\nclearingRight Z -> clearingRight _ <\nclearingRight $ -> subing* $ <\naddRank 0 -> addRank 0 <\naddRank 1 -> addRank 1 <\naddRank * -> addingRank * <\naddingRank # -> addingRank # <\naddingRank % -> addingRank % <\naddingRank X -> normalizeLeft # <\naddingRank Y -> normalizeLeft % <\naddingRank _ -> check$ # >\naddingRank 0 -> check$ # >\naddingRank 1 -> check$ % >\nnormalizeLeft X -> normalizeLeft 0 <\nnormalizeLeft Y -> normalizeLeft 1 <\nnormalizeLeft 0 -> normalizeRight 0 >\nnormalizeLeft 1 -> normalizeRight 1 >\nnormalizeLeft _ -> normalizeRight _ >\nnormalizeRight 1 -> normalizeRight 1 >\nnormalizeRight 0 -> normalizeRight 0 >\nnormalizeRight * -> normalizeRight * >\nnormalizeRight # -> normalizeRight # >\nnormalizeRight % -> normalizeRight % >\nnormalizeRight A -> normalizeRight A >\nnormalizeRight Z -> normalizeRight Z >\nnormalizeRight $ -> normalizeRight $ >\nnormalizeRight Q -> normalizeRight 0 >\nnormalizeRight W -> normalizeRight 1 >\nnormalizeRight _ -> to$ _ <\nto$ 0 -> to$ 0 <\nto$ 1 -> to$ 1 <\nto$ $ -> checkMultiplier $ <\nsumRightLeft A -> sumRightLeft A >\nsumRightLeft Z -> sumRightLeft Z >\nsumRightLeft $ -> sumRightLeft $ >\nsumRightLeft 0 -> sumRightLeft 0 >\nsumRightLeft 1 -> sumRightLeft 1 >\nsumRightLeft # -> sumRightLeft # >\nsumRightLeft % -> sumRightLeft % >\nsumRightLeft * -> sumRightLeft * >\nsumRightLeft X -> sumRightLeft X >\nsumRightLeft Y -> sumRightLeft Y >\nsumRightLeft W -> summingRightLeft W <\nsumRightLeft Q -> summingRightLeft Q <\nsumRightLeft _ -> summingRightLeft _ <\nsummingRightLeft 0 -> addZeroLeft Q <\nsummingRightLeft 1 -> addOneLeft W <\nsummingRightLeft $ -> nextRank $ <\nnextRank 1 -> addRankOne Z <\nnextRank Z -> nextRank Z <\nnextRank 0 -> addRankOne A <\nnextRank A -> nextRank A <\nnextRank * -> nextIt * >\naddRankOne 0 -> addRankOne 0 <\naddRankOne 1 -> addRankOne 1 <\naddRankOne * -> addingRankOne * <\naddingRankOne # -> addingRankOne # <\naddingRankOne % -> addingRankOne % <\naddingRankOne X -> normalizeLeft # <\naddingRankOne Y -> normalizeLeft % <\naddZeroLeft $ -> addZeroLeft $ <\naddZeroLeft * -> addZeroLeft * <\naddZeroLeft 0 -> addZeroLeft 0 <\naddZeroLeft 1 -> addZeroLeft 1 <\naddZeroLeft A -> addZeroLeft A <\naddZeroLeft Z -> addZeroLeft Z <\naddZeroLeft * -> addingZeroLeft * <\naddOneLeft $ -> addOneLeft $ <\naddOneLeft * -> addOneLeft * <\naddOneLeft 0 -> addOneLeft 0 <\naddOneLeft 1 -> addOneLeft 1 <\naddOneLeft A -> addOneLeft A <\naddOneLeft Z -> addOneLeft Z <\naddOneLeft * -> addingOneLeft * <\naddingZeroLeft # -> addingZeroLeft # <\naddingZeroLeft % -> addingZeroLeft % <\naddingZeroLeft Y -> addingZeroLeft Y <\naddingZeroLeft X -> addingZeroLeft X <\naddingZeroLeft 0 -> sumRightLeft X >\naddingZeroLeft 1 -> sumRightLeft Y >\naddingZeroLeft _ -> sumRightLeft X >\naddingOneLeft # -> addingOneLeft # <\naddingOneLeft % -> addingOneLeft % <\naddingOneLeft 1 -> addingOneLeft' X <\naddingOneLeft X -> addingOneLeft X <\naddingOneLeft Y -> addingOneLeft Y <\naddingOneLeft 0 -> sumRightLeft Y >\naddingOneLeft _ -> sumRightLeft Y >\naddingOneLeft' 0 -> sumRightLeft 1 >\naddingOneLeft' _ -> sumRightLeft 1 >\naddingOneLeft' 1 -> addingOneLeft' 0 <\n", file=open("factorial.py.out", "w"))
